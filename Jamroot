#
#    Neurosim is a scientific tool which allows numerical integration of dynamical networks.
#
#    Copyright (C) 2011 Alexander Rothkegel, Henning Dickten, Ferdinand Stolz, Justus Schwabedahl
#
#    This file is part of conedy.
#
#    Neurosim is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>



# Specify the path to the Boost project.  If you move this project,
# adjust this path to refer to the Boost root directory.
#use-project boost
#  : ../../.. ;

#using gcc : ming  : i586-mingw32msvc-g++ : :  ;


#using clang ;
#using gcc ;

using bisonc++ ;
using flex++ ;

lib libboost_python : : <name>boost_python ;
lib stdc++ ;
lib z boost_iostreams gsl gslcblas ;
project conedy ;
# : requirements <library>libboost_python ;



using python ;

#project : conedy ? ;

lib Xxf86vm ;
lib X11 : : <use>Xxf86vm ;
lib glut : : <use>X11 ;
lib GLU ;
lib m : : <use>glut ;
obj gslNoise_py : gslNoise.cpp libboost_python z gsl gslcblas ;

obj gslNoise : gslNoise.cpp z gsl gslcblas ;


#lib xxgen
#  :
#  Parser.y
#  Scanner.l
#  ;


#lib xx : Parser.y : <include>/home/alex ;
#obj lexer : Scanner.ll : <include>./ ;
# parser : Parser.yy : <include>./ ;


INCLUDES Scanner.ll : Parserbase.h ;



#parser = Parser.yy <include>./
objects =   fullNetwork.cpp  phaseResponseOscillators.cpp sdeNode.cpp  globals.cpp instruction.cpp stdOdeIntegrator.cpp stdSdeIntegrator.cpp odeNode.cpp gslOdeNode.cpp ioNode.cpp eventHandler.cpp pulseCoupledPhaseOscillator.cpp pulseCoupledPhaseOscillator.cpp  pulseCoupledExcitatoryNeuron.cpp network.cpp dynNetwork.cpp createNetwork.cpp spatialNetwork.cpp mapNode.cpp eventHandler.cpp node.cpp  dynNode.cpp gslNoise statisticsNetwork.cpp commandLineArguments.cpp generatedNodes.cpp priorityQueue.cpp ;

exe conedyCondor : Parser.yy Scanner.ll command.cpp  conedy.cpp $(objects)   m z boost_iostreams gsl gslcblas : <cxxflags>-DCONDOR debug <link>static  <include>./ ;
exe conedy	:   Parser.yy Scanner.ll command.cpp  conedy.cpp $(objects)  m z boost_iostreams gsl gslcblas stdc++ : release <link>static <cxxflags>-g <include>./ ;
exe conedyDebug  : Parser.yy Scanner.ll command.cpp  conedy.cpp $(objects)  z boost_iostreams gsl gslcblas : debug <cxxflags>-DDEBUG <link>shared <include>./ ;
#exe neuroDebug  :  conedy.cpp $(objects) m  z boost_iostreams gsl gslcblas  : debug <link>shared <include>./ ;





# Set up the project-wide requirements that everything uses the
# boost_python library from the project whose global ID is

# /boost/python.
#project
#  : requirements <library>/boost/python//boost_python ;

# Declare the three extension modules.  You can specify multiple
# source files after the colon separated by spaces.

python-extension python-conedy : neuroPython.cpp command.cpp $(objects)  z boost_iostreams gsl gslcblas libboost_python : release ;

#using python : 2.5 ;
#python-extension python-conedyDebug : neuroPython.cpp $(objects)  z boost_iostreams gsl gslcblas libboost_python : debug ;

#
#
#python-extension getting_started2 : getting_started2.cpp ;
#python-extension std_pair_ext : std_pair.cpp ;

# A little "rule" (function) to clean up the syntax of declaring tests
# of these extension modules.
#local rule run-test ( test-name : sources + )
#{
#    import testing ;
#    testing.make-test run-pyd : $(sources) : : $(test-name) ;
#}

# Declare test targets
#run-test test1 : getting_started1 test_getting_started1.py ;
#run-test test2 : getting_started2 test_getting_started2.py ;
#run-test test3 : std_pair_ext test_std_pair.py ;

# A target that runs all the tests
#alias test : test1 test2 test3 ;

# Only run tests when explicitly requested
#explicit test test1 test2 test3 ;

