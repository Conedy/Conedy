/*
    Conedy is a scientific tool which allows numerical integration of dynamical networks.

    Copyright (C) 2011 Alexander Rothkegel, Henning Dickten, Ferdinand Stolz, Justus Schwabedahl

    This file is part of conedy.

    Conedy is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>
*/


%option noyywrap
%option yylineno

%{
#include "Parserbase.h" // Make sure the flexer can communicate with bison++
                      //using return values
%}

digit	[0-9]

ws	[ \t\n]+
ID       [A-Za-z][a-z0-9A-Z\_]*



%%
{ws}				{ /* no action */ }


{digit}+		{return (ParserBase::INT); }


		/* {digit}+"."{digit}*e     	 {return (ParserBase::DOUBLE); } */

		/*[0-9]+"."[0-9]+([eE][-+]?[0-9]+)?  {return (ParserBase::DOUBLE);  */

[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? { return (ParserBase::DOUBLE); }






"#"[^\n]*\n	{}


"\""[^\"]*"\""	{return (ParserBase::STRING);}

:[^\:]*:	{return (ParserBase::SYSTEMCOMMAND);}


"&&"		{return(ParserBase::AND);}
"||"		{return(ParserBase::OR);}
"!"		{return(ParserBase::NOT);}
"<"		{return('<');}
">"		{return('>');}
"=="		{return(ParserBase::EQUAL);}
"!="		{return(ParserBase::NEQUAL);}
"<="		{return(ParserBase::LESSEQUAL);}
">="		{return(ParserBase::GREATEREQUAL);}

TRUE		{return(ParserBase::BOOLONE);}
FALSE		{return(ParserBase::BOOLZERO);}

"+=" 		{return(ParserBase::ASSIGNPLUS);}
"-=" 		{return(ParserBase::ASSIGNMINUS);}
"*=" 		{return(ParserBase::ASSIGNTIMES);}
"/=" 		{return(ParserBase::ASSIGNDIVIDE);}
"%=" 		{return(ParserBase::ASSIGNMODOLO);}

"++"		{return(ParserBase::PLUSPLUS);}
"--"		{return(ParserBase::MINUSMINUS);}

"-"		{return('-');}
"+"		{return('+');}
"*"		{return('*');}
"/"		{return('/');}
"("		{return('(');}
")"		{return(')');}
"{"		{return('{');}
"}"		{return('}');}

print		{return(ParserBase::PRINT);}
loop		{return(ParserBase::LOOP);}
double	{return(ParserBase::DOUBLETOKEN);}
baseType	{return(ParserBase::DOUBLETOKEN);}
string		{return(ParserBase::STRINGTOKEN);}
while		{return(ParserBase::WHILE);}
for		{return(ParserBase::FOR);}
exit		{return(ParserBase::EXIT);}
vectorFor	{return(ParserBase::VECTORFOR);}
chainedFor 	{return(ParserBase::CHAINEDFOR); }
if		{return(ParserBase::IF);}
network	{return(ParserBase::NETWORKTOKEN); }
ode		{return(ParserBase::NODETOKEN); }
int	{return(ParserBase::INTTOKEN); }
readInitialCondition	{return(ParserBase::READINITIALCONDITION); }

%{		// Nodes
%}
cnnNode			{return(ParserBase::CNNNODE); }
countEdges		{return(ParserBase::COUNTEDGES); }
couplingSumNode			{return(ParserBase::COUPLINGSUMNODE); }
izhikevichMap		{return(ParserBase::IZHIKEVICHMAP);}
randomBlueprintNode {return(ParserBase::RANDOMBLUEPRINTNODE); }
setParams		{return(ParserBase::SETPARAMS); }
setParam		{return(ParserBase::SETPARAM); }
snapshot		{return(ParserBase::SNAPSHOT); }
streamInLattice		{return(ParserBase::STREAMINLATTICE); }

